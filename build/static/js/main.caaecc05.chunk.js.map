{"version":3,"sources":["About.js","components/Navbar.js","Textform.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setmystyle","btnText","setbtnText","className","style","id","type","onClick","border","Navbar","props","console","log","mode","href","title","to","aboutText","toggleMode","role","htmlFor","Textform","text","setText","heading","value","onChange","event","target","rows","newtext","toUpperCase","toLowerCase","split","length","Alert","alert","msg","App","setMode","setAlert","showAlert","message","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.caaecc05.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle, setmystyle]= useState({\r\n        color: \"black\",\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btnText,setbtnText] = useState(\"enable dark mode\")\r\n    const toggleStyle=()=>{\r\n        if(mystyle.color === 'black'){\r\n        setmystyle({\r\n            color: \"white\",\r\n        backgroundColor: 'black',\r\n        border: '1px solid white'\r\n        })\r\n        setbtnText(\"enable light mode\")\r\n    }\r\n\r\n    else {\r\n        setmystyle({\r\n            color: \"black\",\r\n            backgroundColor: 'white'\r\n        })\r\n        setbtnText(\"enable dark mode\")\r\n    }\r\n    \r\n}\r\n    \r\n    return ( \r\n        <>\r\n        \r\n        <div className=\"container\" style={mystyle}>\r\n            <h1>About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"container\" my-3>\r\n        <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btnText}</button>\r\n        </div>\r\n     \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  console.log(props)\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n  \r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/about\">{props.aboutText}About</Link>\r\n              </li>\r\n          \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n ","import React ,{useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"uppercase was clicked\" +text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext)\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"uppercase was clicked\" +text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext)\r\n    }\r\n    const clear =()=>{\r\n        let newtext = '';\r\n        setText(newtext)\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n   \r\n       const [text,setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style ={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>{props.heading}</h1>\r\n             <div className=\"mb-3\">\r\n            <label htmlFor=\"mytext\" className=\"form-label\">Example textarea</label>\r\n            <textarea className=\"form-control\" value = {text} onChange ={handleOnChange} style ={{backgroundColor : props.mode === 'dark' ? 'grey' : 'white',color: props.mode === 'dark' ? 'white' : 'black'}} id=\"mytext\" rows=\"3\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\"  onClick = {handleUpClick}> convert into uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleLoClick}> convert into lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {clear}> clear text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style ={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>Your text here</h1>\r\n        <p>{text.split(\"\").length} words and {text.length} characters in the textarea</p>\r\n        <p>{0.008*text.split(\"\").length} minutes read</p>\r\n        \r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n  ","import About from \"./About\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./Textform\";\nimport React, { useState } from 'react'\nimport Alert from \"./Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const[mode,setMode]= useState('light');\n  const[alert,setAlert]= useState(null);\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type:type\n    })\n    setTimeout(()=>{\n       setAlert(null);\n    },2000);\n  }\n  const toggleMode = ()=>{\n    if(mode ===\"light\"){\n      setMode ('dark');\n      document.body.style.backgroundColor='#585858';\n      showAlert(\"Dark mode has been enabled\",\"Success\");\n    }\n    else{\n      setMode ('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\",\"Success\");\n    }\n\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title = \"Diwali_2021\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n          <Textform heading = 'Enter the text below' mode={mode}/>\n          </Route>\n        </Switch>\n     \n      </div>  \n      </Router>    \n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}